{
  "name": "todoitemsdbmigrations",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "migration:create": "npx sequelize-cli migration:create --name",
    "migrate_with_NODE_ENV_existing": "env-cmd npx sequelize-cli db:migrate",
    "migrate:rollback": "env-cmd npx sequelize-cli db:migrate:undo",
    "migrate_with_prod_envs": "env-cmd npx sequelize-cli db:migrate",
    "lint": "eslint ."
  },
  "scriptsComments": {
    "start": "When using env-cmd there is no need to write -f .env to indicate which env to use as by default .env file is used.",
    "alternatives": "Other ways of writing the migrate are \"env-cmd -f .env npx sequelize-cli db:migrate\" and \"env-cmd -file .env npx sequelize-cli db:migrate\". ",
    "run_prod": "By default sequelize will migrate the development DB. To set the NODE_ENV to production and run the migration to migrate the prod DB, use this= env-cmd -e production npx sequelize-cli db:migrate"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "env-cmd": "^10.1.0",
    "pg": "^8.13.1",
    "sequelize": "^6.37.5",
    "sequelize-cli": "^6.6.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.14.0",
    "eslint": "^9.14.0",
    "globals": "^15.12.0"
  },
  "devDependenciesComments": {
    "eslint": "was installed using npm install @eslint/config --save-dev."
  }
}
